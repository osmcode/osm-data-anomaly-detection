---
Checks: '*,-cppcoreguidelines-avoid-c-arrays,-cppcoreguidelines-avoid-magic-numbers,-cppcoreguidelines-owning-memory,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-cppcoreguidelines-pro-type-static-cast-downcast,-cppcoreguidelines-pro-type-vararg,-fuchsia-*,-google-runtime-references,-hicpp-avoid-c-arrays,-hicpp-no-array-decay,-hicpp-vararg,-llvmlibc-*,-llvm-qualified-auto,-modernize-avoid-c-arrays,-modernize-use-trailing-return-type,-readability-implicit-bool-conversion,-readability-magic-numbers,-readability-qualified-auto'
#
#  For a list of check options, see:
#  http://clang.llvm.org/extra/clang-tidy/checks/list.html
#
#  Disabled checks:
#
#  cppcoreguidelines-avoid-c-arrays
#  hicpp-avoid-c-arrays
#  modernize-avoid-c-arrays
#    Needed for C API compatibility.
#
#  cppcoreguidelines-avoid-magic-numbers
#  readability-magic-numbers
#    I am not that picky.
#
#  cppcoreguidelines-owning-memory
#    We don't want to use the GSL library.
#
#  cppcoreguidelines-pro-bounds-array-to-pointer-decay
#    Limited use and many false positives including for all asserts.
#
#  cppcoreguidelines-pro-bounds-pointer-arithmetic
#    Difficult to get by without it...
#
#  cppcoreguidelines-pro-type-static-cast-downcast
#    This is needed and totally okay if we are sure about the types.
#
#  cppcoreguidelines-pro-type-vararg
#    We need some of these functions at least and for some functions it isn't
#    even clear that those are vararg functions.
#
#  fuchsia-*
#    Much too strict.
#
#  google-runtime-references
#    This is just a matter of preference.
#
#  hicpp-no-array-decay
#    Alias for cppcoreguidelines-pro-bounds-array-to-pointer-decay.
#
#  hicpp-vararg
#    Too strict, sometimes calling vararg functions is necessary.
#
#  llvmlibc-*
#    Not applicable.
#
#  llvm-qualified-auto,readability-qualified-auto
#    Not always a good idea as iterators can be pointers on some systems but
#    not on others.
#
#  modernize-use-trailing-return-type
#    We are not that modern.
#
#  readability-implicit-bool-conversion
#    I don't think this makes the code more readable.
#
WarningsAsErrors: '*'
...
